/**
@page Components Thoughts about Components

@code
template <typename Listener_T extends ComponentListener>
class Component : public EventListener {
public:
    Component() {
        mListener = new Listener_T();
    }
    Component(Listener_T* custom) {
        mListener = custom;
    }
    shared_ptr<Listener_T> GetListener();
protected:
    shared_ptr<Listener_T> mListener;
}
@endcode

@code
class TriggerComponent : public Component<TriggerComponentListener> {
    void HandleEvent(Event* e) {
        if(e.triggered()) { // pseudo-shit
            GetListener().Triggered();
        }
    }
}
@endcode

@code
class ComponentListener {
public:
    void BindSlot(String signal_identifier, boost::signal2::slot);
    void UnbindSlot(boost::signal2::slot&);
protected:
    void _CallSignal(String signal_identifier);
    boost::ptr_map<String, boost::signal2::signal> mSignals;
}
@endcode

@code
class TriggerComponentListener : public ComponentListener {
    void Triggered() {
        _CallSignal("Triggered");
        OnTriggered();
    }
    virtual void OnTriggered() {}
}
@endcode

@section method1 Callbacks - Method 1: Signals & Slots
Bind your custom method (somewhere in your code) using the BindSlot method and boost::bind.

@code
TriggerComponent* comp = new TriggerComponent();
comp.GetListener().BindSlot("Triggered", boost::bind(&MyClass::MyCallback));
mNode.AddComponent(comp);
@endcode


@section method2 Callbacks - Method 2: Inheritance from ComponentListener
Inherit from the @c ***ComponentListener and override the virtual callback.

Note: This method is not available for any script interface.

class CustomTriggerComponentListener : public TriggerComponentListener() {
    void OnTriggered() {
        // do some custom shit
    }   
}
// --
TriggerComponent* comp = new TriggerComponent(new CustomTriggerComponentListener());
mNode.AddComponent(comp);

*/
